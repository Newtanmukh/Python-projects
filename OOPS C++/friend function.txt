Like friend class, a friend function can be given a special grant to access private and protected members.
A friend function can be: 
a) A member of another class 
b) A global function 

//too many friend functions might lessen the value of encapsulation.
//friendship is not mutual.  If class A is a friend of B, then B doesn’t become a friend of A automatically.
//friendship is NOT inherited.
that is, If a base class has a friend function, then the function doesn’t become a friend of the derived class(es). 
//friend functions cannot do runtime polymorphism in its members. also it violates data hiding.

FRIEND CLASS :

#include <iostream>
class A {
private:
	int a;

public:
	A() { a = 0; }
	friend class B; // Friend Class
};

class B {
private:
	int b;

public:
	void showA(A& x)
	{
		// Since B is friend of A, it can access
		// private members of A
		std::cout << "A::a=" << x.a;
	}
};

int main()
{
	A a;
	B b;
	b.showA(a);
	return 0;
}


####################################################################

FRIEND FUNCTION :

#include <iostream>

class B;

class A {
public:
	void showB(B&);
};

class B {
private:
	int b;

public:
	B() { b = 0; }
	friend void A::showB(B& x); // Friend function
};

void A::showB(B& x)
{
	// Since showB() is friend of B, it can
	// access private members of B
	std::cout << "B::b = " << x.b;
}

int main()
{
	A a;
	B x;
	a.showB(x);
	return 0;
}
